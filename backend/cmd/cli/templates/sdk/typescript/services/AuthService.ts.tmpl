import { AxiosInstance } from 'axios';
import { ApiResponse } from '../client';

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
  name?: string;
}

export interface AuthResponse {
  token: string;
  user: {
    id: string;
    email: string;
    name?: string;
    createdAt: string;
  };
  expiresAt: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export class AuthService {
  private token: string | null = null;
  private refreshToken: string | null = null;

  constructor(private axios: AxiosInstance) {
    // Try to load token from localStorage in browser environment
    if (typeof window !== 'undefined' && window.localStorage) {
      this.token = localStorage.getItem('mobile_backend_token');
      this.refreshToken = localStorage.getItem('mobile_backend_refresh_token');
    }
  }

  /**
   * Register a new user
   */
  async register(data: RegisterRequest): Promise<ApiResponse<AuthResponse>> {
    const response = await this.axios.post<ApiResponse<AuthResponse>>('/api/v1/auth/register', data);
    this.setTokens(response.data.data);
    return response.data;
  }

  /**
   * Login user
   */
  async login(data: LoginRequest): Promise<ApiResponse<AuthResponse>> {
    const response = await this.axios.post<ApiResponse<AuthResponse>>('/api/v1/auth/login', data);
    this.setTokens(response.data.data);
    return response.data;
  }

  /**
   * Logout user
   */
  async logout(): Promise<ApiResponse<void>> {
    try {
      const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/logout');
      this.clearTokens();
      return response.data;
    } catch (error) {
      // Clear tokens even if logout fails
      this.clearTokens();
      throw error;
    }
  }

  /**
   * Refresh authentication token
   */
  async refreshToken(data: RefreshTokenRequest): Promise<ApiResponse<AuthResponse>> {
    const response = await this.axios.post<ApiResponse<AuthResponse>>('/api/v1/auth/refresh', data);
    this.setTokens(response.data.data);
    return response.data;
  }

  /**
   * Get current user profile
   */
  async getProfile(): Promise<ApiResponse<AuthResponse['user']>> {
    const response = await this.axios.get<ApiResponse<AuthResponse['user']>>('/api/v1/profile');
    return response.data;
  }

  /**
   * Update user profile
   */
  async updateProfile(data: Partial<AuthResponse['user']>): Promise<ApiResponse<AuthResponse['user']>> {
    const response = await this.axios.put<ApiResponse<AuthResponse['user']>>('/api/v1/profile', data);
    return response.data;
  }

  /**
   * Change password
   */
  async changePassword(data: { currentPassword: string; newPassword: string }): Promise<ApiResponse<void>> {
    const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/change-password', data);
    return response.data;
  }

  /**
   * Request password reset
   */
  async requestPasswordReset(email: string): Promise<ApiResponse<void>> {
    const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/forgot-password', { email });
    return response.data;
  }

  /**
   * Reset password with token
   */
  async resetPassword(data: { token: string; newPassword: string }): Promise<ApiResponse<void>> {
    const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/reset-password', data);
    return response.data;
  }

  /**
   * Verify email address
   */
  async verifyEmail(token: string): Promise<ApiResponse<void>> {
    const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/verify-email', { token });
    return response.data;
  }

  /**
   * Resend verification email
   */
  async resendVerificationEmail(): Promise<ApiResponse<void>> {
    const response = await this.axios.post<ApiResponse<void>>('/api/v1/auth/resend-verification');
    return response.data;
  }

  /**
   * Get current authentication token
   */
  getToken(): string | null {
    return this.token;
  }

  /**
   * Check if user is authenticated
   */
  isAuthenticated(): boolean {
    return this.token !== null;
  }

  /**
   * Set authentication tokens
   */
  private setTokens(authData: AuthResponse): void {
    this.token = authData.token;
    // Note: refreshToken would come from the response in a real implementation
    
    // Save to localStorage in browser environment
    if (typeof window !== 'undefined' && window.localStorage) {
      localStorage.setItem('mobile_backend_token', authData.token);
      if (this.refreshToken) {
        localStorage.setItem('mobile_backend_refresh_token', this.refreshToken);
      }
    }
  }

  /**
   * Clear authentication tokens
   */
  private clearTokens(): void {
    this.token = null;
    this.refreshToken = null;
    
    // Remove from localStorage in browser environment
    if (typeof window !== 'undefined' && window.localStorage) {
      localStorage.removeItem('mobile_backend_token');
      localStorage.removeItem('mobile_backend_refresh_token');
    }
  }
}
